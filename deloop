#! /usr/bin/env python3
# -*- coding: utf-8 -*-
"""
File    : deloop
Author  : A. Dareau

Comments: a command line tool to deloop samples generated with the SP-404 looper
          (but could work with other kind of loopers)

          Usage :
              $> deloop fileA.wav fileB.wav output.wav
"""
# %% Imports
import sys
import wave
import array

# %% Help string

HELP_STRING = """
[DELOOP]

a command line tool to deloop samples generated with the SP-404 looper
(but could work with other kind of loopers)

Usage :
   $> deloop fileA.wav fileB.wav output.wav
"""


# %% Main
def main():
    global HELP_STRING

    # -- INITIALIZE
    # check number of arguments
    if len(sys.argv) != 4:
        print(HELP_STRING)
        return
    
    # get arguments
    file_A = sys.argv[1]
    file_B = sys.argv[2]
    file_out = sys.argv[3]

    # -- PROCESS
    # open first file
    with wave.open(file_A, "rb") as wave_file:
        params = wave_file.getparams()
        data_A = wave_file.readframes(wave_file.getnframes())

    # open second file
    with wave.open(file_B, "rb") as wave_file:
        data_B = wave_file.readframes(wave_file.getnframes())

    # convert bytes to numbers
    frames_A = array.array("h", data_A)
    frames_B = array.array("h", data_B)

    # sum
    sum_array = array.array("h")
    for sA, sB in zip(frames_A, frames_B):
        sum_array.append(sA - sB)

    # write out
    with wave.open(file_out, "wb") as output:
        output.setparams(params)
        output.writeframes(sum_array.tobytes())



# %% Execute
if __name__ == "__main__":
    main()
